# Stage 1: Build Stage (install Python dependencies)
FROM python:3.10-slim-buster as python_builder

# Install system dependencies for Graphviz and a C compiler
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    graphviz \
    libgraphviz-dev \
    gcc

WORKDIR /app

# Copy requirements.txt first to leverage Docker caching
COPY requirements.txt ./

# Install Python dependencies directly into the system's Python installation
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Final Runtime Stage
FROM node:16 as final_stage

RUN apt update \
    && apt install -y --no-install-recommends software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt update \
    && apt install -y --no-install-recommends python3.10 \
    && apt install -y --no-install-recommends graphviz

WORKDIR /opt/app

# Copy Python installation and executables
COPY --from=python_builder /usr/local/lib/python3.10/site-packages/ /usr/local/lib/python3.10/site-packages/
COPY --from=python_builder /usr/local/bin/ /usr/local/bin/

# --- AGGRESSIVE DEBUGGING FOR start.sh COPY ---
# This line attempts to copy start.sh
COPY start.sh /opt/app/start.sh

# Immediately after copying, list contents of /opt/app/ to confirm start.sh is there.
# This output MUST appear in your build logs if the build is successful up to this point.
RUN echo "--- Contents of /opt/app/ during build stage ---" && \
    ls -la /opt/app/ && \
    echo "-----------------------------------------------"

# Verify start.sh exists. If it does NOT exist, this command will fail the entire build.
RUN test -f /opt/app/start.sh || (echo "BUILD ERROR: start.sh file NOT found in /opt/app/ after COPY!" && exit 1)

# Verify start.sh is executable. If it's not, this will also fail the build.
RUN test -x /opt/app/start.sh || (echo "BUILD ERROR: start.sh is NOT executable in /opt/app/!" && exit 1)

# Ensure executable permissions (redundant if previous test passed, but harmless)
RUN chmod +x /opt/app/start.sh
# ------------------------------------------------

COPY . /opt/app/src

ENV PATH="/usr/local/bin:$PATH"
ENV NODE_ENV=container
ENV FLASK_APP=src/app.py
ENV BASENAME=/
ENV DEBUG=TRUE

CMD ["/opt/app/start.sh"]